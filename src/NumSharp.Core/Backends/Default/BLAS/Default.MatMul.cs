using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Runtime.CompilerServices;
using NumSharp.Utilities;
using NumSharp.Utilities.Maths;

namespace NumSharp.Backends
{
    public partial class DefaultEngine
    {
        /// <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.matmul.html</remarks>
        public override NDArray Matmul(NDArray lhs, NDArray rhs)
        {
            if (lhs.Shape.IsScalar || rhs.Shape.IsScalar)
                throw new InvalidOperationException("Matmul can't handle scalar multiplication, use `*` or `np.dot(..)` instead");

            //If the first argument is 1-D, it is promoted to a matrix by prepending a 1 to its dimensions. After matrix multiplication the prepended 1 is removed.
            if (lhs.ndim == 1 && rhs.ndim == 2)
                throw new NotSupportedException("Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?)");

            if (rhs.ndim == 1)
                rhs = np.expand_dims(rhs, 1);

            if (lhs.ndim == 2 || rhs.ndim == 2)
                return MultiplyMatrix(lhs, rhs);

            NDArray l = lhs;
            NDArray r = rhs;
            (l, r) = np.broadcast_arrays(l, r);
            var retShape = l.Shape.Clean();
            Console.WriteLine(retShape);
            Debug.Assert(l.shape[0] == r.shape[0]);
            var len = l.size;
            var ret = new NDArray(np._FindCommonArrayType(l.typecode, r.typecode), retShape);
            var iterShape = new Shape(retShape.dimensions.Take(retShape.dimensions.Length-2).ToArray());
            var incr = new NDCoordinatesIncrementor(ref iterShape);
            var index = incr.Index;

            //TODO! we need to create IEnumeable<int> on NDCoordinatesIncrementor so we can do something like this:
            //TODO! Parallel.ForEach(incr, i => MultiplyMatrix(l[index], r[index], ret[index]));
            for (int i = 0; i < len; i++, incr.Next())
            {
                MultiplyMatrix(l[index], r[index], ret[index]);
            }

            return ret;
        }

        #region 22matmul

        /// <remarks>https://docs.scipy.org/doc/numpy/reference/generated/numpy.multiply.html</remarks>
        [SuppressMessage("ReSharper", "JoinDeclarationAndInitializer")]
        [MethodImpl((MethodImplOptions)768)]
        protected static NDArray MultiplyMatrix(NDArray left, NDArray right, NDArray @out = null)
        {
            Debug.Assert(left.Shape.NDim == 2);
            Debug.Assert(right.Shape.NDim == 2);
            Debug.Assert(@out is null || @out.shape[0] == left.Shape[0] && right.Shape[1] == 2);
            var shape = left.Shape;
            var rows = shape[0];
            var columns = shape[1];
            var othercolumns = right.Shape[1];

            NDArray result = @out ?? new NDArray(np._FindCommonArrayType(left.GetTypeCode, right.GetTypeCode), Shape.Matrix(rows, othercolumns));
#if _REGEN
            #region Compute
            switch (result.typecode)
            {
	            %foreach supported_numericals,supported_numericals_lowercase%
                case NPTypeCode.#1: { 
                    switch (left.typecode)
                    {
	                    %foreach supported_numericals,supported_numericals_lowercase%
                        case NPTypeCode.#101: { 
                            switch (right.typecode)
                            {
	                            %foreach supported_numericals,supported_numericals_lowercase%
                                case NPTypeCode.#201: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            |#2 sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (#2)(Operator.Multiply(left.Get#101(row, i), right.Get#201(i, column)));
                                            result.Set#1(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                %
                            }

                            break;
                        }
                        %
                    }
                    
                    break;
                }
                %
            }
            #endregion
#else

            #region Compute
            switch (result.typecode)
            {
                case NPTypeCode.Byte: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            byte sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (byte)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetByte(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Int16: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            short sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (short)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.UInt16: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ushort sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ushort)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt16(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Int32: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            int sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (int)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.UInt32: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            uint sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (uint)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt32(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Int64: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            long sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (long)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.UInt64: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            ulong sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (ulong)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetUInt64(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Char: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            char sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (char)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetChar(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Double: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            double sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (double)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetDouble(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Single: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            float sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (float)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetSingle(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
                case NPTypeCode.Decimal: { 
                    switch (left.typecode)
                    {
                        case NPTypeCode.Byte: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetByte(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt16: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt16(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt32: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt32(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Int64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.UInt64: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetUInt64(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Char: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetChar(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Double: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDouble(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Single: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetSingle(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                        case NPTypeCode.Decimal: { 
                            switch (right.typecode)
                            {
                                case NPTypeCode.Byte: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetByte(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt16: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt16(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt32: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt32(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Int64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.UInt64: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetUInt64(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Char: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetChar(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Double: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetDouble(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Single: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetSingle(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                                case NPTypeCode.Decimal: { 
                                    for (int row = 0; row < rows; ++row)
                                    {
                                        for (int column = 0; column < othercolumns; ++column)
                                        {
                                            decimal sum = default;
                                            for (int i = 0; i < columns; ++i)
                                                sum += (decimal)(Operator.Multiply(left.GetDecimal(row, i), right.GetDecimal(i, column)));
                                            result.SetDecimal(sum, row, column);
                                        }
                                    }

                                    break;
                                }
                            }

                            break;
                        }
                    }
                    
                    break;
                }
            }
            #endregion
#endif

            return result;
        }


        #endregion
    }
}
