<#@ template language="C#" #>
<#@ parameter type="System.String" name="operationName" #>
<#@ parameter type="System.String" name="operationTypesString" #>
<#@ parameter type="System.String" name="operationExpressionString" #>
<#
    System.String[] operationTypes = operationTypesString.Split(';');
    System.String[] converter = new System.String[operationTypes.Length];

    for (int idx = 0;idx < converter.Length;idx++)
    {
        //operationTypes[idx] = System.Type.GetType(operationTypes[idx]).FullName;
        switch(operationTypes[idx])
        {
            case "System.Int64" : 
            {
                converter[idx] = "System.Convert.ToInt64";
                break;
            }
            case "System.Int32" : 
            {
                converter[idx] = "System.Convert.ToInt32";
                break;
            }
            case "System.Int16" : 
            {
                converter[idx] = "System.Convert.ToInt16";
                break;
            }
            case "System.Double" : 
            {
                converter[idx] = "System.Convert.ToDouble";
                break;
            }
            case "System.Single" : 
            {
                converter[idx] = "System.Convert.ToSingle";
                break;
            }
            case "System.Numerics.Complex" : 
            {
                converter[idx] = "NumSharp.Core.Converter.ToComplex";
                break;
            }
            case "System.Numerics.Quaternion" : 
            {
                converter[idx] = "NumSharp.Core.Converter.ToQuaternion";
                break;
            }
        }
    }
#>
/*
This file was generated by template ../NDArray.Elementwise.tt
In case you want to do some changes do the following 

1 ) adapt the tt file
2 ) execute powershell file "GenerateCode.ps1" on root level

*/
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Numerics;
using NumSharp.Core.Shared;
 
namespace NumSharp.Core
{
    public partial class NDArray
    {
       public static NDArray operator <#=operationName#>(NDArray np1, NDArray np2)
       {
            /// following code is for determine if scalar or not
            /// also for determine result
            int scalarNo = !(np1.ndim == 0 || np2.ndim == 0) ? 0 : -1;
            
            if( scalarNo == 0 )
            {
                if (!Enumerable.SequenceEqual(np1.shape,np2.shape))
                {
                    throw new IncorrectShapeException();
                }
            }
            else
            {
                if (np1.ndim == 0)
                    scalarNo = 1;
                else 
                    scalarNo = 2;
            }
                    
            NDArray result = null;

            switch (scalarNo)
            {
                case 1 : 
                {
                    result = new NDArray(np2.dtype,np2.shape);
                    break;
                }
                case 2 : 
                {
                    result = new NDArray(np1.dtype,np1.shape);
                    break;
                }
                default :
                {
                    result = new NDArray(np1.dtype,np1.shape);
                    break;
                } 
            } 

            Array np1SysArr = np1.Storage.GetData();
            Array np2SysArr = np2.Storage.GetData();
            Array np3SysArr = result.Storage.GetData();

            switch (np3SysArr)
            {
            <#
                for (int idx = 0; idx < operationTypes.Length;idx++)
                {
                    WriteLine("");
                    WriteLine("\t\t\t\tcase " + operationTypes[idx] + "[] resArr : ");
                    WriteLine("\t\t\t\t{");
                    WriteLine("\t\t\t\t    " + operationTypes[idx] + "[] np1Array = np1SysArr as " + operationTypes[idx] + "[];");
                    WriteLine("\t\t\t\t    " + operationTypes[idx] + "[] np2Array = np2SysArr as " + operationTypes[idx] + "[];");
                    WriteLine("\t\t\t\t    np1Array = (np1Array == null) ? np1.Storage.CloneData<" + operationTypes[idx] + ">() : np1Array;"); 
                    WriteLine("\t\t\t\t    np2Array = (np2Array == null) ? np2.Storage.CloneData<" + operationTypes[idx] + ">() : np2Array;"); 
                    WriteLine("");
                    WriteLine("\t\t\t\t    if (scalarNo == 0 )");
                    WriteLine("\t\t\t\t        for( int idx = 0; idx < np3SysArr.Length;idx++)");
                    WriteLine("\t\t\t\t            resArr[idx] = np1Array[idx] " + operationName + " np2Array[idx];");
                    WriteLine("\t\t\t\t    else if (scalarNo == 1 )");
                    WriteLine("\t\t\t\t    {");
                    WriteLine("\t\t\t\t        " + operationTypes[idx] + " scalar = np1.Storage.CloneData<" + operationTypes[idx] + ">()[0];" );
                    WriteLine("\t\t\t\t        for( int idx = 0; idx < np3SysArr.Length;idx++)");
                    WriteLine("\t\t\t\t            resArr[idx] = scalar " + operationName + " np2Array[idx];");
                    WriteLine("\t\t\t\t    }");
                    WriteLine("\t\t\t\t    else if (scalarNo == 2 )");
                    WriteLine("\t\t\t\t    {");
                    WriteLine("\t\t\t\t        " + operationTypes[idx] + " scalar = np2.Storage.CloneData<" + operationTypes[idx] + ">()[0];" );
                    WriteLine("\t\t\t\t        for( int idx = 0; idx < np3SysArr.Length;idx++)");
                    WriteLine("\t\t\t\t            resArr[idx] = np1Array[idx] " + operationName + " scalar;");
                    WriteLine("\t\t\t\t    }");
                    WriteLine("\t\t\t\t    break;");
                    WriteLine("\t\t\t\t}");
                }
            #>
                default : 
                {
                    throw new IncorrectTypeException();
                }
            }

            return result;
        }
        
    }

}
